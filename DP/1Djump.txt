class Solution {
public:
    /**
     * @param A: A list of integers
     * @return: The boolean answer
     */
    bool canJump(vector<int> A) {
        // write you code here
        int length = A.size();
        if (length == 0) {
            return false;
        }
        vector<bool> reachable (length, false);
        reachable[0] = true;
        for (int i = 1; i < length; ++i) {
            for (int j = 0; j < i; ++j) {
                if (reachable[j] && j + A[j] >= i) {
                    reachable[i] = true;
                    break;
                }
            }
        }
        return reachable[length-1];
    }
};

//greedy
class Solution {
public:
    /**
     * @param A: A list of integers
     * @return: The boolean answer
     */
    bool canJump(vector<int> A) {
        // write you code here
        int length = A.size();
        if (length == 0) {
            return false;
        }
        int farest = 0;
        for (int i = 0; i <= farest; ++i) {
            farest = max(farest, i + A[i]);
            if (farest+1 >= length) {
                return true;
            }
        }
        return false;
    }
};